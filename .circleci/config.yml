version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.4
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.0.2

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:

  terraform-init:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: Terraform init
          command: |
            cd terraform
            terraform init -input=false
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform plan
          command: |
            cd terraform
            terraform plan -out tfapply 
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform apply
          command: |
            cd terraform
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
      
  terraform-plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform
            terraform plan -destroy -out tfdestroy 
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform
            terraform destroy -auto-approve tfdestroy

  build-auction:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout

      - run:
        # installs a docker client that will be used to run the docker commands
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      
      - setup_remote_docker

      - run:
          name: Build Docker image
          command: | 
            docker build -t django_app .
      - run:
          name: Push to Docker Hub
          command: |
            echo "$DOCKER_PASSWORD"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag $APP:latest $DOCKER_USERNAME/$MY_WEBAPP
            docker push $DOCKER_USERNAME/$MY_WEBAPP
            
  # deploy-auction:
  #   executor: aws-eks/default
  #   steps:
  #     - checkout
  #     - aws-eks/eks-authenticate:
  #         cluster-name: $EKS_CLUSTER_NAME
  #     - kubernetes/install-kubectl:
  #         version: 1.22.2
  #     - kubernetes/apply:
  #         namespace: default
  #         files:
  #           - ./deployments/app-deployment.yaml 
  #           - ./deployments/app-tcp-service.yaml
  #           - ./deployments/db-deployment.yaml
  #           - ./deployments/db-data-persistentvolumeclaim.yaml
  #           - ./deployments/deploying-and-monitoring-an-auction-and-sock-webapp-through-a-cicd-pipeline-default-networkpolicy.yaml
  deploy-auction:
      docker:
        - image: 'cimg/python:3.10'
      parameters:
        cluster-name:
          description: |
            ${EKS_CLUSTER_NAME}
          type: string
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: ./deployments/app-deployment.yaml, ./deployments/app-tcp-service.yaml, ./deployments/db-deployment.yaml, ./deployments/db-data-persistentvolumeclaim.yaml, ./deployments/deploying-and-monitoring-an-auction-and-sock-webapp-through-a-cicd-pipeline-default-networkpolicy.yaml
            resource-name: deployments/auction 
          
workflows:
  version: 2
  django-deployment:
    jobs:
      - terraform-init
      - terraform-plan:
          requires: ["terraform-init"]
      - hold-apply:
          type: approval
          requires: ["terraform-plan"]
      - terraform-apply:
          requires: ["hold-apply"]
      - terraform-plan-destroy:
          requires: ["terraform-appy"]
      - hold-destroy:
          type: approval
          requires: ["terraform-plan-destroy"]
      - terraform-destroy:
          requires: ["hold-destroy"]  
      - build-auction:
          requires: ["terraform-apply"]
      - deploy-auction:
          requires: ["terraform-apply, build-auction"]