version: 2.1
orbs:
  slack: circleci/slack@4.10.1
  

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1
          
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible

jobs:
  hadolint:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Test code indentation
          command: |
              cd django_project
              make lint

## DEPLOY INFRASTRUCTURE
  terraform-init:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: Terraform init
          command: |
            cd terraform
            terraform init -input=false
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform plan
          command: |
            cd terraform
            terraform plan
            terraform plan -var-file=secrets.tfvars
          environment:
            TF_VAR_do_token: "${DO_API_TOKEN}"
            TF_VAR_pvt_key: "${PVT_API_KEY}"     
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform apply
          command: |
            cd terraform
            terraform apply -var-file=secrets.tfvars
            terraform apply -auto-approve
      - persist_to_workspace:
          root: .
          paths:
            - .
      
  terraform-plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd terraform
            terraform plan -destroy
          when: on_fail
      - persist_to_workspace:
          root: .
          paths:
            - .
   

  terraform-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd terraform
            terraform apply -auto-approve tfdestroy
          when: on_fail

workflows:
  version: 2
  django-deployment:
    jobs:
      - terraform-init
      - terraform-plan:
          requires: ["terraform-init"]
      - terraform-apply:
          requires: ["terraform-plan"]
      # - terraform-plan-destroy:
      #     requires: ["terraform-appy"]
      # - terraform-destroy:
      #     requires: ["terraform-plan-destroy"]            

